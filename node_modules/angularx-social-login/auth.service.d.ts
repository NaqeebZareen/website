import { Observable, ReplaySubject } from 'rxjs';
import { LoginProvider } from './entities/login-provider';
import { SocialUser } from './entities/user';
import * as ɵngcc0 from '@angular/core';
export interface AuthServiceConfigItem {
    id: string;
    provider: LoginProvider;
    /**
     * This field allows to load login providers SDKs lazily.
     * Lazy loading is activated if it's true and vice versa.
     */
    lazyLoad?: boolean;
}
export interface LoginOpt {
    /**
     * Facebook FB.login options: https://developers.facebook.com/docs/reference/javascript/FB.login/v2.11.
     */
    auth_type?: string;
    scope?: string;
    return_scopes?: boolean;
    enable_profile_selector?: boolean;
    profile_selector_ids?: string;
    /**
     * Google gapi.auth2.ClientConfig: \
     * https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiauth2clientconfig.
     */
    client_id?: string;
    cookie_policy?: string;
    fetch_basic_profile?: boolean;
    hosted_domain?: string;
    openid_realm?: string;
    ux_mode?: string;
    redirect_uri?: string;
    offline_access?: boolean;
    prompt?: string;
    login_hint?: string;
}
export declare class AuthServiceConfig {
    lazyLoad: boolean;
    providers: Map<string, LoginProvider>;
    _ready: ReplaySubject<any>;
    constructor(providers: AuthServiceConfigItem[] | Observable<AuthServiceConfigItem[]>);
    initialize(providers: AuthServiceConfigItem[]): void;
}
export declare class AuthService {
    private static readonly ERR_LOGIN_PROVIDER_NOT_FOUND;
    private static readonly ERR_NOT_LOGGED_IN;
    private providers;
    private _user;
    private _authState;
    private _readyState;
    private initialized;
    get authState(): Observable<SocialUser>;
    /** Provides an array of provider ID's as they become ready */
    get readyState(): Observable<string[]>;
    constructor(config: AuthServiceConfig);
    private initialize;
    signIn(providerId: string, opt?: LoginOpt): Promise<SocialUser>;
    signOut(revoke?: boolean): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AuthService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AuthService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImF1dGguc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVEQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgTG9naW5Qcm92aWRlciB9IGZyb20gJy4vZW50aXRpZXMvbG9naW4tcHJvdmlkZXInO1xyXG5pbXBvcnQgeyBTb2NpYWxVc2VyIH0gZnJvbSAnLi9lbnRpdGllcy91c2VyJztcclxuZXhwb3J0IGludGVyZmFjZSBBdXRoU2VydmljZUNvbmZpZ0l0ZW0ge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIHByb3ZpZGVyOiBMb2dpblByb3ZpZGVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGZpZWxkIGFsbG93cyB0byBsb2FkIGxvZ2luIHByb3ZpZGVycyBTREtzIGxhemlseS5cclxuICAgICAqIExhenkgbG9hZGluZyBpcyBhY3RpdmF0ZWQgaWYgaXQncyB0cnVlIGFuZCB2aWNlIHZlcnNhLlxyXG4gICAgICovXHJcbiAgICBsYXp5TG9hZD86IGJvb2xlYW47XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBMb2dpbk9wdCB7XHJcbiAgICAvKipcclxuICAgICAqIEZhY2Vib29rIEZCLmxvZ2luIG9wdGlvbnM6IGh0dHBzOi8vZGV2ZWxvcGVycy5mYWNlYm9vay5jb20vZG9jcy9yZWZlcmVuY2UvamF2YXNjcmlwdC9GQi5sb2dpbi92Mi4xMS5cclxuICAgICAqL1xyXG4gICAgYXV0aF90eXBlPzogc3RyaW5nO1xyXG4gICAgc2NvcGU/OiBzdHJpbmc7XHJcbiAgICByZXR1cm5fc2NvcGVzPzogYm9vbGVhbjtcclxuICAgIGVuYWJsZV9wcm9maWxlX3NlbGVjdG9yPzogYm9vbGVhbjtcclxuICAgIHByb2ZpbGVfc2VsZWN0b3JfaWRzPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHb29nbGUgZ2FwaS5hdXRoMi5DbGllbnRDb25maWc6IFxcXHJcbiAgICAgKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9hcGktY2xpZW50LWxpYnJhcnkvamF2YXNjcmlwdC9yZWZlcmVuY2UvcmVmZXJlbmNlZG9jcyNnYXBpYXV0aDJjbGllbnRjb25maWcuXHJcbiAgICAgKi9cclxuICAgIGNsaWVudF9pZD86IHN0cmluZztcclxuICAgIGNvb2tpZV9wb2xpY3k/OiBzdHJpbmc7XHJcbiAgICBmZXRjaF9iYXNpY19wcm9maWxlPzogYm9vbGVhbjtcclxuICAgIGhvc3RlZF9kb21haW4/OiBzdHJpbmc7XHJcbiAgICBvcGVuaWRfcmVhbG0/OiBzdHJpbmc7XHJcbiAgICB1eF9tb2RlPzogc3RyaW5nO1xyXG4gICAgcmVkaXJlY3RfdXJpPzogc3RyaW5nO1xyXG4gICAgb2ZmbGluZV9hY2Nlc3M/OiBib29sZWFuO1xyXG4gICAgcHJvbXB0Pzogc3RyaW5nO1xyXG4gICAgbG9naW5faGludD86IHN0cmluZztcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBdXRoU2VydmljZUNvbmZpZyB7XHJcbiAgICBsYXp5TG9hZDogYm9vbGVhbjtcclxuICAgIHByb3ZpZGVyczogTWFwPHN0cmluZywgTG9naW5Qcm92aWRlcj47XHJcbiAgICBfcmVhZHk6IFJlcGxheVN1YmplY3Q8YW55PjtcclxuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyczogQXV0aFNlcnZpY2VDb25maWdJdGVtW10gfCBPYnNlcnZhYmxlPEF1dGhTZXJ2aWNlQ29uZmlnSXRlbVtdPik7XHJcbiAgICBpbml0aWFsaXplKHByb3ZpZGVyczogQXV0aFNlcnZpY2VDb25maWdJdGVtW10pOiB2b2lkO1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF1dGhTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEVSUl9MT0dJTl9QUk9WSURFUl9OT1RfRk9VTkQ7XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBFUlJfTk9UX0xPR0dFRF9JTjtcclxuICAgIHByaXZhdGUgcHJvdmlkZXJzO1xyXG4gICAgcHJpdmF0ZSBfdXNlcjtcclxuICAgIHByaXZhdGUgX2F1dGhTdGF0ZTtcclxuICAgIHByaXZhdGUgX3JlYWR5U3RhdGU7XHJcbiAgICBwcml2YXRlIGluaXRpYWxpemVkO1xyXG4gICAgZ2V0IGF1dGhTdGF0ZSgpOiBPYnNlcnZhYmxlPFNvY2lhbFVzZXI+O1xyXG4gICAgLyoqIFByb3ZpZGVzIGFuIGFycmF5IG9mIHByb3ZpZGVyIElEJ3MgYXMgdGhleSBiZWNvbWUgcmVhZHkgKi9cclxuICAgIGdldCByZWFkeVN0YXRlKCk6IE9ic2VydmFibGU8c3RyaW5nW10+O1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBBdXRoU2VydmljZUNvbmZpZyk7XHJcbiAgICBwcml2YXRlIGluaXRpYWxpemU7XHJcbiAgICBzaWduSW4ocHJvdmlkZXJJZDogc3RyaW5nLCBvcHQ/OiBMb2dpbk9wdCk6IFByb21pc2U8U29jaWFsVXNlcj47XHJcbiAgICBzaWduT3V0KHJldm9rZT86IGJvb2xlYW4pOiBQcm9taXNlPGFueT47XHJcbn1cclxuIl19