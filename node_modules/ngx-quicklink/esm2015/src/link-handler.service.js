import * as tslib_1 from "tslib";
import { Injectable, InjectionToken } from '@angular/core';
import { RouterPreloader } from '@angular/router';
import { PrefetchRegistry } from './prefetch-registry.service';
const ɵ0 = function (cb) {
    const start = Date.now();
    return setTimeout(function () {
        cb({
            didTimeout: false,
            timeRemaining: function () {
                return Math.max(0, 50 - (Date.now() - start));
            }
        });
    }, 1);
}, ɵ1 = () => { };
const requestIdleCallback = typeof window !== 'undefined'
    ? window.requestIdleCallback || ɵ0
    : ɵ1;
const observerSupported = () => typeof window !== 'undefined' ? !!window.IntersectionObserver : false;
const ɵ2 = observerSupported;
export const LinkHandler = new InjectionToken('LinkHandler');
let ObservableLinkHandler = class ObservableLinkHandler {
    constructor(loader, queue) {
        this.loader = loader;
        this.queue = queue;
        this.elementLink = new Map();
        this.observer = observerSupported()
            ? new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const link = entry.target;
                        const routerLink = this.elementLink.get(link);
                        this.queue.add(routerLink.urlTree);
                        this.observer.unobserve(link);
                        requestIdleCallback(() => {
                            this.loader.preload().subscribe(() => void 0);
                            this.queue.remove(routerLink.urlTree);
                        });
                    }
                });
            })
            : null;
    }
    register(el) {
        this.elementLink.set(el.element, el);
        this.observer.observe(el.element);
    }
    // First call to unregister will not hit this.
    unregister(el) {
        if (this.elementLink.has(el.element)) {
            this.observer.unobserve(el.element);
            this.elementLink.delete(el.element);
        }
    }
    supported() {
        return observerSupported();
    }
};
ObservableLinkHandler = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [RouterPreloader, PrefetchRegistry])
], ObservableLinkHandler);
export { ObservableLinkHandler };
let PreloadLinkHandler = class PreloadLinkHandler {
    constructor(loader, queue) {
        this.loader = loader;
        this.queue = queue;
    }
    register(el) {
        this.queue.add(el.urlTree);
        requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));
    }
    unregister(_) { }
    supported() {
        return true;
    }
};
PreloadLinkHandler = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [RouterPreloader, PrefetchRegistry])
], PreloadLinkHandler);
export { PreloadLinkHandler };
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay1oYW5kbGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcXVpY2tsaW5rLyIsInNvdXJjZXMiOlsic3JjL2xpbmstaGFuZGxlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7V0F3QnpELFVBQVMsRUFBWTtJQUNuQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekIsT0FBTyxVQUFVLENBQUM7UUFDaEIsRUFBRSxDQUFDO1lBQ0QsVUFBVSxFQUFFLEtBQUs7WUFDakIsYUFBYSxFQUFFO2dCQUNiLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEQsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNSLENBQUMsT0FDRCxHQUFHLEVBQUUsR0FBRSxDQUFDO0FBZGQsTUFBTSxtQkFBbUIsR0FDdkIsT0FBTyxNQUFNLEtBQUssV0FBVztJQUMzQixDQUFDLENBQUMsTUFBTSxDQUFDLG1CQUFtQixNQVd6QjtJQUNILENBQUMsR0FBUyxDQUFDO0FBRWYsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLEVBQUUsQ0FDN0IsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsTUFBYyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7O0FBRWpGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FB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RDlCLFVBQVUsRUFBRTs2Q0FFaUIsZUFBZSxFQUFpQixnQkFBZ0I7R0FEakUsa0JBQWtCLENBYTlCO1NBYlksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExpbmtEaXJlY3RpdmUgfSBmcm9tICcuL2xpbmsuZGlyZWN0aXZlJztcbmltcG9ydCB7IFJvdXRlclByZWxvYWRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBMaW5rSGFuZGxlclN0cmF0ZWd5IH0gZnJvbSAnLi9saW5rLWhhbmRsZXItc3RyYXRlZ3knO1xuaW1wb3J0IHsgUHJlZmV0Y2hSZWdpc3RyeSB9IGZyb20gJy4vcHJlZmV0Y2gtcmVnaXN0cnkuc2VydmljZSc7XG5cbnR5cGUgUmVxdWVzdElkbGVDYWxsYmFja0hhbmRsZSA9IGFueTtcbnR5cGUgUmVxdWVzdElkbGVDYWxsYmFja09wdGlvbnMgPSB7XG4gIHRpbWVvdXQ6IG51bWJlcjtcbn07XG50eXBlIFJlcXVlc3RJZGxlQ2FsbGJhY2tEZWFkbGluZSA9IHtcbiAgcmVhZG9ubHkgZGlkVGltZW91dDogYm9vbGVhbjtcbiAgdGltZVJlbWFpbmluZzogKCgpID0+IG51bWJlcik7XG59O1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIHJlcXVlc3RJZGxlQ2FsbGJhY2s6ICgoXG4gICAgICBjYWxsYmFjazogKChkZWFkbGluZTogUmVxdWVzdElkbGVDYWxsYmFja0RlYWRsaW5lKSA9PiB2b2lkKSxcbiAgICAgIG9wdHM/OiBSZXF1ZXN0SWRsZUNhbGxiYWNrT3B0aW9uc1xuICAgICkgPT4gUmVxdWVzdElkbGVDYWxsYmFja0hhbmRsZSk7XG4gICAgY2FuY2VsSWRsZUNhbGxiYWNrOiAoKGhhbmRsZTogUmVxdWVzdElkbGVDYWxsYmFja0hhbmRsZSkgPT4gdm9pZCk7XG4gIH1cbn1cblxuY29uc3QgcmVxdWVzdElkbGVDYWxsYmFjayA9XG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjayB8fFxuICAgICAgZnVuY3Rpb24oY2I6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2Ioe1xuICAgICAgICAgICAgZGlkVGltZW91dDogZmFsc2UsXG4gICAgICAgICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIDUwIC0gKERhdGUubm93KCkgLSBzdGFydCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCAxKTtcbiAgICAgIH1cbiAgICA6ICgpID0+IHt9O1xuXG5jb25zdCBvYnNlcnZlclN1cHBvcnRlZCA9ICgpID0+XG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gISEod2luZG93IGFzIGFueSkuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgOiBmYWxzZTtcblxuZXhwb3J0IGNvbnN0IExpbmtIYW5kbGVyID0gbmV3IEluamVjdGlvblRva2VuKCdMaW5rSGFuZGxlcicpO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZUxpbmtIYW5kbGVyIGltcGxlbWVudHMgTGlua0hhbmRsZXJTdHJhdGVneSB7XG4gIHByaXZhdGUgZWxlbWVudExpbmsgPSBuZXcgTWFwPEVsZW1lbnQsIExpbmtEaXJlY3RpdmU+KCk7XG4gIHByaXZhdGUgb2JzZXJ2ZXI6IEludGVyc2VjdGlvbk9ic2VydmVyIHwgbnVsbCA9IG9ic2VydmVyU3VwcG9ydGVkKClcbiAgICA/IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBlbnRyeS50YXJnZXQgYXMgSFRNTEFuY2hvckVsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCByb3V0ZXJMaW5rID0gdGhpcy5lbGVtZW50TGluay5nZXQobGluayk7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlLmFkZChyb3V0ZXJMaW5rLnVybFRyZWUpO1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci51bm9ic2VydmUobGluayk7XG4gICAgICAgICAgICByZXF1ZXN0SWRsZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5sb2FkZXIucHJlbG9hZCgpLnN1YnNjcmliZSgoKSA9PiB2b2lkIDApO1xuICAgICAgICAgICAgICB0aGlzLnF1ZXVlLnJlbW92ZShyb3V0ZXJMaW5rLnVybFRyZWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgOiBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9hZGVyOiBSb3V0ZXJQcmVsb2FkZXIsIHByaXZhdGUgcXVldWU6IFByZWZldGNoUmVnaXN0cnkpIHt9XG5cbiAgcmVnaXN0ZXIoZWw6IExpbmtEaXJlY3RpdmUpIHtcbiAgICB0aGlzLmVsZW1lbnRMaW5rLnNldChlbC5lbGVtZW50LCBlbCk7XG4gICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKGVsLmVsZW1lbnQpO1xuICB9XG5cbiAgLy8gRmlyc3QgY2FsbCB0byB1bnJlZ2lzdGVyIHdpbGwgbm90IGhpdCB0aGlzLlxuICB1bnJlZ2lzdGVyKGVsOiBMaW5rRGlyZWN0aXZlKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudExpbmsuaGFzKGVsLmVsZW1lbnQpKSB7XG4gICAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZShlbC5lbGVtZW50KTtcbiAgICAgIHRoaXMuZWxlbWVudExpbmsuZGVsZXRlKGVsLmVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gb2JzZXJ2ZXJTdXBwb3J0ZWQoKTtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJlbG9hZExpbmtIYW5kbGVyIGltcGxlbWVudHMgTGlua0hhbmRsZXJTdHJhdGVneSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9hZGVyOiBSb3V0ZXJQcmVsb2FkZXIsIHByaXZhdGUgcXVldWU6IFByZWZldGNoUmVnaXN0cnkpIHt9XG5cbiAgcmVnaXN0ZXIoZWw6IExpbmtEaXJlY3RpdmUpIHtcbiAgICB0aGlzLnF1ZXVlLmFkZChlbC51cmxUcmVlKTtcbiAgICByZXF1ZXN0SWRsZUNhbGxiYWNrKCgpID0+IHRoaXMubG9hZGVyLnByZWxvYWQoKS5zdWJzY3JpYmUoKCkgPT4gdm9pZCAwKSk7XG4gIH1cblxuICB1bnJlZ2lzdGVyKF86IExpbmtEaXJlY3RpdmUpIHt9XG5cbiAgc3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iXX0=