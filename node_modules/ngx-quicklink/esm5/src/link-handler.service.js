import * as tslib_1 from "tslib";
import { Injectable, InjectionToken } from '@angular/core';
import { RouterPreloader } from '@angular/router';
import { PrefetchRegistry } from './prefetch-registry.service';
var ɵ0 = function (cb) {
    var start = Date.now();
    return setTimeout(function () {
        cb({
            didTimeout: false,
            timeRemaining: function () {
                return Math.max(0, 50 - (Date.now() - start));
            }
        });
    }, 1);
}, ɵ1 = function () { };
var requestIdleCallback = typeof window !== 'undefined'
    ? window.requestIdleCallback || ɵ0
    : ɵ1;
var observerSupported = function () {
    return typeof window !== 'undefined' ? !!window.IntersectionObserver : false;
};
var ɵ2 = observerSupported;
export var LinkHandler = new InjectionToken('LinkHandler');
var ObservableLinkHandler = /** @class */ (function () {
    function ObservableLinkHandler(loader, queue) {
        var _this = this;
        this.loader = loader;
        this.queue = queue;
        this.elementLink = new Map();
        this.observer = observerSupported()
            ? new IntersectionObserver(function (entries) {
                entries.forEach(function (entry) {
                    if (entry.isIntersecting) {
                        var link = entry.target;
                        var routerLink_1 = _this.elementLink.get(link);
                        _this.queue.add(routerLink_1.urlTree);
                        _this.observer.unobserve(link);
                        requestIdleCallback(function () {
                            _this.loader.preload().subscribe(function () { return void 0; });
                            _this.queue.remove(routerLink_1.urlTree);
                        });
                    }
                });
            })
            : null;
    }
    ObservableLinkHandler.prototype.register = function (el) {
        this.elementLink.set(el.element, el);
        this.observer.observe(el.element);
    };
    // First call to unregister will not hit this.
    ObservableLinkHandler.prototype.unregister = function (el) {
        if (this.elementLink.has(el.element)) {
            this.observer.unobserve(el.element);
            this.elementLink.delete(el.element);
        }
    };
    ObservableLinkHandler.prototype.supported = function () {
        return observerSupported();
    };
    ObservableLinkHandler = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [RouterPreloader, PrefetchRegistry])
    ], ObservableLinkHandler);
    return ObservableLinkHandler;
}());
export { ObservableLinkHandler };
var PreloadLinkHandler = /** @class */ (function () {
    function PreloadLinkHandler(loader, queue) {
        this.loader = loader;
        this.queue = queue;
    }
    PreloadLinkHandler.prototype.register = function (el) {
        var _this = this;
        this.queue.add(el.urlTree);
        requestIdleCallback(function () { return _this.loader.preload().subscribe(function () { return void 0; }); });
    };
    PreloadLinkHandler.prototype.unregister = function (_) { };
    PreloadLinkHandler.prototype.supported = function () {
        return true;
    };
    PreloadLinkHandler = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [RouterPreloader, PrefetchRegistry])
    ], PreloadLinkHandler);
    return PreloadLinkHandler;
}());
export { PreloadLinkHandler };
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay1oYW5kbGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcXVpY2tsaW5rLyIsInNvdXJjZXMiOlsic3JjL2xpbmstaGFuZGxlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7U0F3QnpELFVBQVMsRUFBWTtJQUNuQixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekIsT0FBTyxVQUFVLENBQUM7UUFDaEIsRUFBRSxDQUFDO1lBQ0QsVUFBVSxFQUFFLEtBQUs7WUFDakIsYUFBYSxFQUFFO2dCQUNiLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEQsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNSLENBQUMsT0FDRCxjQUFPLENBQUM7QUFkZCxJQUFNLG1CQUFtQixHQUN2QixPQUFPLE1BQU0sS0FBSyxXQUFXO0lBQzNCLENBQUMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLE1BV3pCO0lBQ0gsQ0FBQyxHQUFTLENBQUM7QUFFZixJQUFNLGlCQUFpQixHQUFHO0lBQ3hCLE9BQUEsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsTUFBYyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxLQUFLO0FBQTlFLENBQThFLENBQUM7O0FBRWpGLE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztB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UUFEOUIsVUFBVSxFQUFFO2lEQUVpQixlQUFlLEVBQWlCLGdCQUFnQjtPQURqRSxrQkFBa0IsQ0FhOUI7SUFBRCx5QkFBQztDQUFBLEFBYkQsSUFhQztTQWJZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMaW5rRGlyZWN0aXZlIH0gZnJvbSAnLi9saW5rLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBSb3V0ZXJQcmVsb2FkZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTGlua0hhbmRsZXJTdHJhdGVneSB9IGZyb20gJy4vbGluay1oYW5kbGVyLXN0cmF0ZWd5JztcbmltcG9ydCB7IFByZWZldGNoUmVnaXN0cnkgfSBmcm9tICcuL3ByZWZldGNoLXJlZ2lzdHJ5LnNlcnZpY2UnO1xuXG50eXBlIFJlcXVlc3RJZGxlQ2FsbGJhY2tIYW5kbGUgPSBhbnk7XG50eXBlIFJlcXVlc3RJZGxlQ2FsbGJhY2tPcHRpb25zID0ge1xuICB0aW1lb3V0OiBudW1iZXI7XG59O1xudHlwZSBSZXF1ZXN0SWRsZUNhbGxiYWNrRGVhZGxpbmUgPSB7XG4gIHJlYWRvbmx5IGRpZFRpbWVvdXQ6IGJvb2xlYW47XG4gIHRpbWVSZW1haW5pbmc6ICgoKSA9PiBudW1iZXIpO1xufTtcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICByZXF1ZXN0SWRsZUNhbGxiYWNrOiAoKFxuICAgICAgY2FsbGJhY2s6ICgoZGVhZGxpbmU6IFJlcXVlc3RJZGxlQ2FsbGJhY2tEZWFkbGluZSkgPT4gdm9pZCksXG4gICAgICBvcHRzPzogUmVxdWVzdElkbGVDYWxsYmFja09wdGlvbnNcbiAgICApID0+IFJlcXVlc3RJZGxlQ2FsbGJhY2tIYW5kbGUpO1xuICAgIGNhbmNlbElkbGVDYWxsYmFjazogKChoYW5kbGU6IFJlcXVlc3RJZGxlQ2FsbGJhY2tIYW5kbGUpID0+IHZvaWQpO1xuICB9XG59XG5cbmNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2sgPVxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgID8gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2sgfHxcbiAgICAgIGZ1bmN0aW9uKGNiOiBGdW5jdGlvbikge1xuICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNiKHtcbiAgICAgICAgICAgIGRpZFRpbWVvdXQ6IGZhbHNlLFxuICAgICAgICAgICAgdGltZVJlbWFpbmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gc3RhcnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgMSk7XG4gICAgICB9XG4gICAgOiAoKSA9PiB7fTtcblxuY29uc3Qgb2JzZXJ2ZXJTdXBwb3J0ZWQgPSAoKSA9PlxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/ICEhKHdpbmRvdyBhcyBhbnkpLkludGVyc2VjdGlvbk9ic2VydmVyIDogZmFsc2U7XG5cbmV4cG9ydCBjb25zdCBMaW5rSGFuZGxlciA9IG5ldyBJbmplY3Rpb25Ub2tlbignTGlua0hhbmRsZXInKTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVMaW5rSGFuZGxlciBpbXBsZW1lbnRzIExpbmtIYW5kbGVyU3RyYXRlZ3kge1xuICBwcml2YXRlIGVsZW1lbnRMaW5rID0gbmV3IE1hcDxFbGVtZW50LCBMaW5rRGlyZWN0aXZlPigpO1xuICBwcml2YXRlIG9ic2VydmVyOiBJbnRlcnNlY3Rpb25PYnNlcnZlciB8IG51bGwgPSBvYnNlcnZlclN1cHBvcnRlZCgpXG4gICAgPyBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rID0gZW50cnkudGFyZ2V0IGFzIEhUTUxBbmNob3JFbGVtZW50O1xuICAgICAgICAgICAgY29uc3Qgcm91dGVyTGluayA9IHRoaXMuZWxlbWVudExpbmsuZ2V0KGxpbmspO1xuICAgICAgICAgICAgdGhpcy5xdWV1ZS5hZGQocm91dGVyTGluay51cmxUcmVlKTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIudW5vYnNlcnZlKGxpbmspO1xuICAgICAgICAgICAgcmVxdWVzdElkbGVDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMubG9hZGVyLnByZWxvYWQoKS5zdWJzY3JpYmUoKCkgPT4gdm9pZCAwKTtcbiAgICAgICAgICAgICAgdGhpcy5xdWV1ZS5yZW1vdmUocm91dGVyTGluay51cmxUcmVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgIDogbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvYWRlcjogUm91dGVyUHJlbG9hZGVyLCBwcml2YXRlIHF1ZXVlOiBQcmVmZXRjaFJlZ2lzdHJ5KSB7fVxuXG4gIHJlZ2lzdGVyKGVsOiBMaW5rRGlyZWN0aXZlKSB7XG4gICAgdGhpcy5lbGVtZW50TGluay5zZXQoZWwuZWxlbWVudCwgZWwpO1xuICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZShlbC5lbGVtZW50KTtcbiAgfVxuXG4gIC8vIEZpcnN0IGNhbGwgdG8gdW5yZWdpc3RlciB3aWxsIG5vdCBoaXQgdGhpcy5cbiAgdW5yZWdpc3RlcihlbDogTGlua0RpcmVjdGl2ZSkge1xuICAgIGlmICh0aGlzLmVsZW1lbnRMaW5rLmhhcyhlbC5lbGVtZW50KSkge1xuICAgICAgdGhpcy5vYnNlcnZlci51bm9ic2VydmUoZWwuZWxlbWVudCk7XG4gICAgICB0aGlzLmVsZW1lbnRMaW5rLmRlbGV0ZShlbC5lbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBzdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIG9ic2VydmVyU3VwcG9ydGVkKCk7XG4gIH1cbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByZWxvYWRMaW5rSGFuZGxlciBpbXBsZW1lbnRzIExpbmtIYW5kbGVyU3RyYXRlZ3kge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvYWRlcjogUm91dGVyUHJlbG9hZGVyLCBwcml2YXRlIHF1ZXVlOiBQcmVmZXRjaFJlZ2lzdHJ5KSB7fVxuXG4gIHJlZ2lzdGVyKGVsOiBMaW5rRGlyZWN0aXZlKSB7XG4gICAgdGhpcy5xdWV1ZS5hZGQoZWwudXJsVHJlZSk7XG4gICAgcmVxdWVzdElkbGVDYWxsYmFjaygoKSA9PiB0aGlzLmxvYWRlci5wcmVsb2FkKCkuc3Vic2NyaWJlKCgpID0+IHZvaWQgMCkpO1xuICB9XG5cbiAgdW5yZWdpc3RlcihfOiBMaW5rRGlyZWN0aXZlKSB7fVxuXG4gIHN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIl19